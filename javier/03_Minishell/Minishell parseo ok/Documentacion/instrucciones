# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    instrucciones                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jrollon- <jrollon-@student.42madrid.com    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/04/24 14:30:42 by jrollon-          #+#    #+#              #
#    Updated: 2025/04/24 16:15:04 by jrollon-         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

CONSIDERACIONES CHATGPT:
1. Parsers y tokens.
	Dividir el input del user como ls -l | grep txt > out.txt
	en tokens y luego construir una estructura para interpretarlo
2. Redirección de pipes.
	Entender como funcion dup2, pipe, fork y execve
3. Builtins
	Comandos como cd, exit, export, pwd hay que implementarlos
	sin execve. Mejor hacerlos aparte en ficheros c. y probar
4. Variables de entorno.
	Usar envp del main, y gestionar nuestras propias variables (Manuel,
	puso dos que no se podian destruir) con export y unset
5. Señales. 
	Control+c, control+D, control+\ tienen que comportarse como Bash.
6. Sin errores de valgrind. Norminette y sanitizer

####################
INSTRUCCIONES 42 ###
####################

1. Debe mostrar una entrada (prompt)
	readline(), rl_on_new_line(), rl_redisplay(), rl_replace_line()
	CUIDADO!!! readline(); puede producir leaks que no se necesitan arreglar

2. Debe tener un historial funcional
	add_history(), rl_clear_history()

3. Buscar y ejecutar el ejecutable correcto (basado en PATH o mediante rutas relativas o absolutas)
	Pueden ser archivos ejecutables o scrips. 
	* Si ejecutamos algo como gcc el terminal buscará en la ruta PATH si está. Si no, mostrará:
		"el comando escrito": command not found
		si ponemos: "zanahora queso" -> zanahoria: command not found.
	* si se usan scripts la primera linea (shebang) marca el intérprete: (#!/bin/bash, #!/usr/bin/python3, etc.)
	* ruta relativa: ./a.out
	* ruta absoluta: /home/usuario/proyecto/a.out
	getenv() -> para obtener los PATH y ver si se tiene el ejecutable allí.
	access() -> para ver si se tiene los permisos
	execve() -> para ejecutar el programa.
	fork() -> para ejecutar el programa en un proceso hijo.
	opendir() y readdir() -> para listar los archivos en un directorio (simular ls)
	chdir() -> cambia el directorio actual (como cd)
	sigaction() -> para considerar las señales en el proceso.
	

4. permitido 1 variable global para indicar recepción de una señal. QUIZA MEJOR USAR LA VARIABLE
	CONTEXT PARA PASARLE LOS DATOS DE ESTRUCTURAS QUE CREEMOS.

5. NO interprestar comillas sin cerrar, o caracteres especiales (\, ;)
	* Las comillas dobles "hola mundo" son usadas para pasar por argumentos a programas.
	* comillas sin cerrar generaria un error de sintaxis -> echo "Esto es una prueba   (" pongo la comilla al final para cambie color) sería un error.
	* bash, si pongo algo sin cierre de comillas salta ">" como prompt. que solo se sale con Ctrl-C o poniendo las dobles comillas de cierre -> escribiría el texto
	* zsh, pone "dquote>" y solo se sale con Ctrl-C, o poniendo la doble comilla de cierre -> escribiría el texto.
	* fish, no pone nada, solo pasa el cursor debajo del comando erroneo, se sale con Ctrl-c o poniendo la doble comilla de cierre
	* Caracteres especiales: 
		echo "las \"comillas\" se ponen con \\ delante" -> las "comillas" se ponen con \ delante.
		echo "hola"; echo "mundo" -> 	hola
										mundo  //separa comandos entre si, como en C.
		sleep 5 & -> & hace ejecutar el proceso en segundo plano y muestra [1] pid. Entre corchetes la id del proceso.
			la id del proceso no vuelve.. se incrementa, aunque termine asi que si pongo sleep 5 & otra vez pondra:
				[2] 266469
				[1] Done		sleep 5

6. Gestionar que la ' evite que el shell interprete metacaracteres en la secuencia entrecomillada '
	* echo 'It\'s a test' //no se pueden tener comillas simples sueltas dentro de comillas simples de apertura y cierre a no ser que se le ponga \
	* $ name="Javi"
		$ echo "hola, $name" // aqui $ sirve para introducir la variable y sustituirla
	* si se quiere incluir -> echo "hola \$name" seria: hola $name.

7. Gestionar que la " evite que el shell interpreste metacaracteres en la secuencia entrecomillada excepto el $"
	* echo "It's a test" //aquí la comilla simple está dentro de doble y se interpreta como tal para escribirla.

8. Implementar redericcionamientos:
	< debe redirigir a input
	> debe redirigir a output
	<< debe recibir un delimitador, depués de leer del input de la fuenta actual hasta que una linea que contenga solo
		el delimitador aparezca. Peor no necesita actualizar el historial.
		* cat <<FIN //entrará en modo edición y se parará cuando reconozca un FIN.
		(entra en modo > edicion)
		(escribimos) hola (enter)
		(escribimos) mundo (enter)
		(escribimos) FIN (enter)
		se sale, y escribe: hola
							mundo
							$
	>> debe redirigir el output en modo append (???!!)
	* imaginemos que tenemos un archivo salida.txt con dos lineas: 
		linea 1
		linea 2
	  Ahora le decimos:
	  	echo "nueva linea" >> salida.txt
	  El archivo salida se convertirá en:
	  	linea 1
		linea 2
		nueva linea.
	Con > simple se sustituiría la linea1 y linea2 por la nueva linea.	

9. Implementar pipes (|)

10. Gestionar variables de entorno $(seguidos de chars) que deberán expandirse a sus valores (??!)

11. Gestionar $? que deberá expandirse al estado de salida del comando más reciente ejecutado en la pipeline (??!)

12. Gestionar Ctrl-C, Ctrl-D, Ctrl-\ que deberá funcionar como en BASH!!

13. Cuando sea interactivo
	Ctrl - C -> imprime una nueva entrada en una linea nueva
	Ctrl - D -> terminal el shell
	Ctrl - \ -> no hace nada

14. Implementar los built-ins
	* echo -n
	* cd solo con la ruta relativa o absoluta
	* pwd sin opciones
	* export sin opciones
	* unset sin opciones
	* env sin opciones o argumentos
	* exit sin opciones



